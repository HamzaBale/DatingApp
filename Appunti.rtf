{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang2057{\fonttbl{\f0\fnil Calibri;}{\f1\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9\ltrmark 24/\ltrmark 08\f1\lang2057 /2021\par
Cli Dotnet Create WebApi:\par
1) Create Sln (Solution file): dotnet new sln --name mysolution.sln\par
2) Create the app folder: dotnet new webapi -o API\par
3) dotnet sln add API: add API to sln file\par
Entities: An entity is a row inside our table inside our database, conventions are important.\par
Enitity framework: dotnet ef migrations add  FirstMigration, dotnet ef database update.\par
--------------------------------------------------------------------------------------------------------------------------\par

\pard\sa200\sl276\slmult1\qj\fs24 Importante:\par
Add Extension to A Data Type:\par
Example Extending DateTime with a new method.\par
Create a class.cs with the method you need example: (METODO E CLASSE STATICI)\par
public int GetAge(This DateTime TodayTime) //This keyword is important to extend the dataType.\par
return 99;\par
Now the type DataTime And the variable with this type has GetAge method.\par
\fs22 --------------------------------------------------------------------------------------------------------------------------\par
Repository\par
An abstraction of DbContext interface.\par
Reuinite All the methods you need to use to interrogate the DB in 1 Class.\par
Example:\par
GetElementByid, Username, age ecc...\par
SetElementin Db\par
All methods in 1 class, Easier for testing and cleaner Code.\par
Quando ho Una relazione 1 a molti ==> questa crea una classe esterna per quel tipo di dato esempio:\par
User\{\par
List<Usernames> UsernamesList; // questa deve essere una classe Usernames che cottiene alcune cose.\par
\}\par
\par
Quando richiedo al db un User devo mettere Include(x=> x.Usernames).\par
--------------------------------------------------------------------------------------------------------------------------\par
Dto's - AutoMapper\par
Important as return type of an http Call from a client, Useful for Paramaters used in http methods.\par
Example \par
public async Task(cio\'e8 async)<ActionResult(cio\'e8 fa parte di una risposta http)<IEnumerable(lista generica)<int>>> GetIdByUser(UserDto user)\par
UserDto is a class with certain properties.\par
EMPTY AND STUPID CLASS USEFUL ONLY FOR TAKING CERTAIN TYPE OF DATA.\par
Automapper\par
Crea Classe Automapper : profile\par
Mettila nei servizi affinch\'e8 possa essere injectata.      services.AddAutoMapper(typeof(AutoMapperProfile).Assembly);\fs24\par
\fs22  IMapper autoMapper injecting interface.\par
CreateMap<AppUser,memberDto>()\par
            .ForMember(mem => mem.PhotoUrl, opt => opt.MapFrom(src => src.Photos.FirstOrDefault(x => x.IsMain).Url));\par
            CreateMap<Photo,PhotoDto>();\par
\par
GetAge ===> setta nel dto la prop age con il valore di ritorno del metodo\par
\par
--------------------------------------------------------------------------------------------------------------------------\par
JWT:\par
Server Creates the token using (in my case, the username of the user who made the login) and sends it back to client. \par
Client saves token in localStorage and sents it back with every request made(Get,Post ecc.)\par
When server recieves the token checks if it has been changed and by generating  a new Jwt token using the same username and a secret key he has stored in config files (ESATTAMENTE COME PASSWORDHASH ==> HA KEY SEGRETA+USERNAME CHE GLI PERMETTE DI RISALIRE AL TOKEN GIUSTO)\par
[Auth] sopra i metodi che hanno bisogno di autenticazione.\par
--------------------------------------------------------------------------------------------------------------------------\par
MULTIPLE ENDPOINTS WITH SAME ROUTING\par
[HttpGet("\{id:int\}")]\par
[HttpGet("\{username:alpha\}")]\par
--------------------------------------------------------------------------------------------------------------------------\par
\tab\tab\tab\tab\tab Step Per Creare API\par
1) Creare le enitit\'e0 della nostra app Esempio: Utenti, Veicoli qualsiasi cosa che deve essere salvata nel nostro Database.\par
2)Creare Il DbContext(La nostra interfaccia di comunicazione con il database). Tutte le query passano per il Dbcontext. Creare repository Affinch\'e8 tutti i metodi chiamati su DbContext vengano messi in un unico Posto.\par
3) Creare ovviamente i Controller, sempre utile suddividere i controller e non avere tanti metodi in uno solo. The request matched multiple endpoints. Nel caso pi\'f9 metodi vengano chiamati tramite lo stesso url.\par
4)Nel caso ci sia un meccanismo di Login ==> Creare il Jwt Token Service.(Guarda Github HamzaBale)\par
5)Importante creare Dto che servono per dare il tipo ai parametri dei metodi e tipo di ritorno dei metodi. (Classi semplici)\par
6)Servizi Vanno dichiarati nella startup per poter essere injectati in altri classi. Per far injectare i servizi serve prima definire un interfaccia ==> classe che la implementa\par
7)Middleware Exception layer.\par
8)Automapper Helper.\par
9)Utile meccanismo di Estensione dei tipi. (guardare github Extensions)\par
10) Usare i metodi Http in maniera corretta:\par
GET retrieves resources.\par
POST submits new data to the server.\par
PUT updates existing data.\par
DELETE removes data.\par
\fs24 ---------------------------------------------------------------------------------------------------------------\par
\tab\tab\tab\tab\tab Many to Many relationship\par
Esempio:\par
User puo avere tante foto, la stessa foto puo essere usata da diversi users.\par
Tabellla User.\par
Tabella Foto.\par
Tabella UserFoto (Join tra le due tabelle, che contiene foreign key di entrambe).\par
UserID             FotoId\par
1                       1\par
1                       2\par
3                       1\par
significa che la foto con id 1 viene usata dallo user 1 e 3\par
la foto 1 e 2 vengono usate entrambe da User 1.\par
User Like Example.\par
Volevamo tenere conto degli utenti che ci hanno messo mi piace e quelli a cui abbiamo messo mi piace.\par
Essendo relazione molti a molti ==> nuova entit\'e0 e tabella ==> Likes(Che \'e8 esattamente la tabella creata dall'entit\'e0 del join).\par
Relazione molti a molti tra AppUser. (non tra libro e autore, \'e8 la stessa cosa? forse si).\par
Abbiamo creato la tabella Join => con 2 foreign key che puntavano alla tabella AppUser. Una identificava Chi metteva mi piace, una identificava a chi mettevano mi piace.\par
la sua primary key era formata dalla coppia new \{sourceId,LikedId\}\par
Nella tabella AppUser abbiamo messo 2 collezioni di tipo UserLike, che tenevano le coppie di Id => sourceId, LikedId.\par
 Questo ci \'e8 stato utile quando saremmo andati a prendere gli AppUser a cui abbiamo messo "mi piace". Cio\'e8 le coppie <1,2> cio\'e8 utente 1 ha messo mi piace a utente 2. Nella lista SourceUsers avr\'f2 una lista di coppie che inizano con <1,x>.\par
Nella lista LikedbyUsers avr\'f2 una lista di coppie fatte da <x,1> con 1 id dell'utente loggato.\par
\fs22 --------------------------------------------------------------------------------------------------------------------------\par
Differenza importante tra Iqueryable e Ienumbareble:\par
1) IQuearyable \'e8 pi\'f9 efficente quando si tratta di fare chiamate al database (riporta solo le righe che ci interessano)\par
2) Se IEnumerable da problemi con WHERE (RICORDA WHERE SEMPRE). USARE IQUERYABLE.\fs24\par
\par
\par
\par
\par
\par
\fs22\par
--------------------------------------------------------------------------------------------------------------------------\par
\fs24\tab\tab\tab Status Code da Ritornare Per PUT\par

\pard\sa200\sl276\slmult1 HTTP status code 200 OK for a successful PUT of an update to an existing resource. No response body needed. (Per Section 9.6, 204 No Content is even more appropriate.)\par
HTTP status code 201 Created for a successful PUT of a new resource, with the most specific URI for the new resource returned in the Location header field and any other relevant URIs and metadata of the resource echoed in the response body. (RFC 2616 Section 10.2.2)\par
HTTP status code 409 Conflict for a PUT that is unsuccessful due to a 3rd-party modification, with a list of differences between the attempted update and the current resource in the response body. (RFC 2616 Section 10.4.10)\par
HTTP status code 400 Bad Request for an unsuccessful PUT, with natural-language text (such as English) in the response body that explains why the PUT failed. (RFC 2616 Section 10.4)\par
---------------------------------------------------------------------------------------------------------------\fs22\par
}
 